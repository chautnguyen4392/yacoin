ARMV7
1.1 Installing 7z archiver: http://www.7-zip.org/
(When writing instructions used 7-Zip 9.20 64 bit X64, but most likely any version will do)

1.2 Installation msys shell:
-Download http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download
-Press Install
-Director to install C: \ MinGW
-check "... also install support for the graphical user interface."
-Removed checkmark "..in the start menu, and / or .." "... on the desktop"
-Press continue
-Press continue
-Press All Packages, then MSYS
-place checkmark
msys-autoconf-bin
msys-automake-bin
msys-base-bin
msys-libtool-bin
-Press Installation, Apply Changes, Apply. After installation is complete, click Close, and close the MinGW Installation Manager.

1.3 Installation qt-5.4.0 for Android
-Download http://master.qt.io/archive/qt/5.4/5.4.0/qt-opensource-windows-x86-android-5.4.0.exe
-Run the installer
-Specify The installation directory (for writing instruction I have installed in the folder C: \ Qt \ Qt5.4.0)
-Choose Among components MinGW 4.9.1, other components keep the default
(You can also select Android X86, and Android armv5 if you are going to collect under the CPU)

1.4 Installing the JAVA JDK
-Select Http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html on site
-Download And install the JDK (for writing instruction used jdk-8u25-windows-i586.exe)

1.5 Installing the Android SDK
-Download http://dl.google.com/android/installer_r24.0.2-windows.exe
-Set In the folder C: \ Android \ sdk
-Run SDK Manager.exe
-Set Android SDK Tools 24.0.2, Android SDK Platform-tools 21, Android SDK Build-tools 21.1.2, Google USB driver,
SDK Platform 21, Google API 21, ARM EABI v7a System Image

1.6 Installing the Android NDK
-On Site https://developer.android.com/tools/sdk/ndk/index.html#Downloads
-Download https://dl.google.com/android/ndk/android-ndk-r10d-windows-x86_64.exe
-Set In the folder C: \ Android \ android-ndk-r10d (file android-ndk-r10d-windows-x86_64.exe is samoraspokovyvayuschiysya archive that is unpacked by double-clicking in the current folder, so it is best to open his 7-zip and select the folder for unpacking on their own)
-Add The path C: \ Android \ android-ndk-r10d \ toolchains \ arm-linux-androideabi-4.9 \ prebuilt \ windows-x86_64 \ bin to the system PATH variable
A detailed description of how to do this on Windows 8, Windows 7, Windows XP and Windows Vista
https://www.java.com/ru/download/help/path.xml
(Just do not need to perform the last paragraph of this statement, "Open a command prompt again and run the java code.")

Check that you have added the correct path to the PATH variable:
-Open the Windows command prompt (Press Windows + R button at the same time. This will open the window "Run" in the Open box, type the cmd. Click Ok).
-Type arm-linux-androideabi-g ++ -v
At the command prompt will be printed text. At the end of the text should be written:
Thread model: posix
gcc version 4.9 20140827 (prerelease) (GCC)

1.7 Installing Apache Ant
-Select Https://ant.apache.org/bindownload.cgi on site
-Download The program archive: http://apache-mirror.rbc.ru/pub/apache//ant/binaries/apache-ant-1.9.4-bin.zip
-Go to folder C: \ Android \ apache-ant-1.9.4

1.8 Add new system variables (They just need to step 2. Building dependency, then they can be removed)
-Press Right-click on "Computer", click "Properties" from the menu, then "Advanced System Settings", then "Environment Variables"
-In The "System Variables", click "To create" (below will go list "variable and its value")
ANDROID_DEV / c / Android / android-ndk-r10d / platforms / android-9 / arch-arm / usr
AR /c/Android/android-ndk-r10d/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-ar
AS /c/Android/android-ndk-r10d/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-as
CC /c/Android/android-ndk-r10d/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-gcc
CFLAGS --sysroot = / c / Android / android-ndk-r10d / platforms / android-9 / arch-arm /
CPP /c/Android/android-ndk-r10d/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-cpp
CPPFLAGS --sysroot = / c / Android / android-ndk-r10d / platforms / android-9 / arch-arm /
CXX /c/Android/android-ndk-r10d/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-g++
CXXFLAGS --sysroot = / c / Android / android-ndk-r10d / platforms / android-9 / arch-arm / -I / c / Android / android-ndk-r10d / sources / cxx-stl / gnu-libstdc ++ / 4.9 / include -I / c / android / android-ndk-r10d / sources / cxx-stl / gnu-libstdc ++ / 4.9 / libs / armeabi-v7a / include
LD /c/Android/android-ndk-r10d/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-ld
NDK_PROJECT_PATH C: \ Android \ android-ndk-r10d
RANLIB /c/Android/android-ndk-r10d/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-ranlib

2. Building dependency.
The instruction dependencies are stored in the folder C: \ Android \ deps

2.1 OpenSSL
-Download http://www.openssl.org/source/openssl-1.0.2.tar.gz
-Browse In the folder C: \ MinGW \ msys \ 1.0 and run msys.bat
From MinGw shell run the following code:

cd / c / deps /
tar xvfz openssl-1.0.2.tar.gz
cd openssl-1.0.2
Configure no-shared no-dso android-armv7
make

2.2 Berkeley DB
-Download http://download.oracle.com/berkeley-db/db-6.0.20.tar.gz
-From MinGw shell run the following code:

cd / c / deps /
tar xvfz db-6.0.20.tar.gz
cd db-6.0.20 / build_unix
../dist/configure --host = arm-none-linux --enable-cxx --disable-shared --disable-replication
make

2.3 Boost
-Download http://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.7z/download
-Go to Boost_1_57_0.7z in the folder C: \ Android \ deps
-Open A Windows command prompt and run the following code:

cd C: \ Android \ deps \ boost_1_57_0
bootstrap.bat

Do not close the command prompt. Open the file C: \ Android \ deps \ boost_1_57_0 \ project-config.jam in a text editor, delete its contents, paste the following text

import option;
  
using gcc: arm: arm-linux-androideabi-g ++ exe;.
 
option.set keep-going: false;

and save the file

Return to the command prompt and type:

b2 --build-type = complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset = gcc-arm variant = release link = static threading = multi threadapi = pthread target-os = android define = BOOST_MATH_DISABLE_FLOAT128 include = C: \ android \ android-ndk-r10d \ sources \ cxx-stl \ gnu-libstdc ++ \ 4.9 \ include include = C: \ android \ android-ndk-r10d \ sources \ cxx -stl \ gnu-libstdc ++ \ 4.9 \ libs \ armeabi \ include include = C: \ android \ android-ndk-r10d \ platforms \ android-9 \ arch-arm \ usr \ include

After running this command in the folder C: \ Android \ deps \ boost_1_57_0 \ stage \ lib should appear the following files:
libboost_atomic-gcc-mt-s-1_57.a
libboost_chrono-gcc-mt-s-1_57.a
libboost_filesystem-gcc-mt-s-1_57.a
libboost_program_options-gcc-mt-s-1_57.a
libboost_system-gcc-mt-s-1_57.a
libboost_thread_pthread-gcc-mt-s-1_57.a

2.4 LevelDB
-Select Https://github.com/yacoin/yacoin on site
-Press Download ZIP
-go to yacoin-master.zip in C: \ Android
-Open MinGW shell (C: \ MinGW \ msys \ 1.0 \ msys.bat) and run the following code:

cd / c / android / yacoin-master / src / leveldb
TARGET_OS = OS_ANDROID_CROSSCOMPILE make libleveldb.a libmemenv.a

2.5 ifaddrs
-Go to Https://github.com/kmackay/android-ifaddrs on site
-Press Download ZIP
-Open Archives android-ifaddrs-master.zip, select ifaddrs.c and ifaddrs.h files and remove them to the C: \ Android \ yacoin-master \ src

3. Compilation
3.1 Putting Yacoin QT

Open the file yacoin-qt.pro
Instead

# BOOST_LIB_SUFFIX = -mgw49-mt-s-1_55
# BOOST_INCLUDE_PATH = C: / deps / boost_1_55_0
# BOOST_LIB_PATH = C: / deps / boost_1_55_0 / stage / lib
# BDB_INCLUDE_PATH = C: /deps/db-6.0.20/build_unix
# BDB_LIB_PATH = C: /deps/db-6.0.20/build_unix
# OPENSSL_INCLUDE_PATH = C: /deps/openssl-1.0.1j/include
# OPENSSL_LIB_PATH = C: /deps/openssl-1.0.1j

insert

USE_IPV6 = 0
USE_LEVELDB = 1
USE_ASM = 1

BOOST_LIB_SUFFIX = -gcc-mt-s-1_57
BOOST_INCLUDE_PATH = C: / Android / deps / boost_1_57_0
BOOST_LIB_PATH = C: / Android / deps / boost_1_57_0 / stage / lib
BDB_INCLUDE_PATH = C: /Android/deps/db-6.0.20/build_unix
BDB_LIB_PATH = C: /Android/deps/db-6.0.20/build_unix
OPENSSL_INCLUDE_PATH = C: /Android/deps/openssl-1.0.2/include
OPENSSL_LIB_PATH = C: /Android/deps/openssl-1.0.2

Instead

! Windows | contains (USE_BUILD_INFO, 1) {
    genbuild.depends = FORCE
    genbuild.commands = cd $$ PWD; / Bin / sh share / genbuild.sh $$ OUT_PWD / build / build.h
    genbuild.target = $$ OUT_PWD / build / build.h
    PRE_TARGETDEPS + = $$ OUT_PWD / build / build.h
    QMAKE_EXTRA_TARGETS + = genbuild
    DEFINES + = HAVE_BUILD_INFO
}

insert

# Windows |! Contains (USE_BUILD_INFO, 1) {
# Genbuild.depends = FORCE
# Genbuild.commands = cd $$ PWD; / Bin / sh share / genbuild.sh $$ OUT_PWD / build / build.h
# Genbuild.target = $$ OUT_PWD / build / build.h
# PRE_TARGETDEPS + = $$ OUT_PWD / build / build.h
# QMAKE_EXTRA_TARGETS + = genbuild
# DEFINES + = HAVE_BUILD_INFO
#}

After a string src / irc.h \ paste src / ifaddrs.h \
(That is, to become like this:
src / irc.h \
src / ifaddrs.h \
src / mruset.h \
)

After a string src / qt / transactiontablemodel.cpp \ paste src / ifaddrs.c \

Comment out the line 434 LIBS + = -lrt
(That is, to become like this:
! Windows:! Macx {
    DEFINES + = LINUX
# LIBS + = -lrt
}
)

Change the line
LIBS + = -lboost_system $$ BOOST_LIB_SUFFIX -lboost_filesystem $$ BOOST_LIB_SUFFIX -lboost_program_options $$ BOOST_LIB_SUFFIX -lboost_thread $$ BOOST_THREAD_LIB_SUFFIX
on
LIBS + = -lboost_system $$ BOOST_LIB_SUFFIX -lboost_filesystem $$ BOOST_LIB_SUFFIX -lboost_program_options $$ BOOST_LIB_SUFFIX -lboost_thread_pthread $$ BOOST_THREAD_LIB_SUFFIX

-Open The file C: \ Qt \ Qt5.4.0 \ Tools \ QtCreator \ bin \ qtcreator.exe
-Press "Tools" -> "Settings", then select the Android tab
-Check In line "JDK Placement" C: \ Program Files (x86) \ Java \ jdk1.8.0_25
-Check In line "SDK Accommodation for Android" C: \ Android \ sdk
-Check In line "Placing NDK for Android" C: \ Android \ android-ndk-r10d
-Check In line "Ant program" C: \ Android \ apache-ant-1.9.4 \ bin \ ant.bat
-Press "OK"
Press "File" -> "Open file or project ..."
Locate "yacoin-qt.pro" and click "open"
-Check Tick for Android armeabi-v7a (GCC 4.9, Qt 5.4.0), the remaining remove ticks
Press "Configure project"
-Press "Projects" -> "Build" -> "Create templates" 
Press "Finish"
-In Yacoin-qt project select Other files-> android-> AndroidManifest.xml and enter the package name, application name, application icons (icons are located in the folder C: \ Android \ yacoin-master \ src \ qt \ res \ icons) ( For Google Play Market icon should be at least 512x512) 
-Take Your Android phone / tablet (version must be between 2.3 and higher)
-Browse In "Settings" -> "Applications".
-Check Tick "Unknown Sources"
-Browse In the "Development"
-Place Checkmark "Debugging USB"
-Connect Via USB your phone / tablet to your computer. Do not select the phone / tablet to "Enable USB-drive"
-Must Be found Android device. 
If Windows can not find a driver for the device, then select their own folder C: \ Android \ sdk \ extras \ google \ usb_driver have android_winusb.inf file
-In QtCreator'e click on the green robot and select Build: Release
-Press The green arrow (Start) 
-Choose Your phone / tablet, press OK and wait for the completion of the compilation.
-After Completion Yacoin-Qt compilation will be installed on your phone / tablet and running. And in the folder C: \ Android \ build-yacoin-qt-Android_armeabi_v7a_GCC_4_9_Qt_5_4_0-Release \ android-build \ bin will QtApp-debug.apk file. Rename it to Yacoin-Qt-0.5.1-debug.apk and can rasprostronyaetsya :)

Changes for Android X86
1. Add the path C: \ Android \ android-ndk-r10d \ toolchains \ x86-4.9 \ prebuilt \ windows-x86_64 \ bin to your PATH
2. Change the environment variables as follows:

ANDROID_DEV / c / Android / android-ndk-r10d / platforms / android-9 / arch-x86 / usr
AR /c/Android/android-ndk-r10d/toolchains/x86-4.9/prebuilt/windows-x86_64/bin/i686-linux-android-ar
AS /c/Android/android-ndk-r10d/toolchains/x86-4.9/prebuilt/windows-x86_64/bin/i686-linux-android-as
CC /c/Android/android-ndk-r10d/toolchains/x86-4.9/prebuilt/windows-x86_64/bin/i686-linux-android-gcc
CFLAGS --sysroot = / c / Android / android-ndk-r10d / platforms / android-9 / arch-x86 /
CPP /c/Android/android-ndk-r10d/toolchains/x86-4.9/prebuilt/windows-x86_64/bin/i686-linux-android-cpp
CPPFLAGS --sysroot = / c / Android / android-ndk-r10d / platforms / android-9 / arch-x86 /
CXX /c/Android/android-ndk-r10d/toolchains/x86-4.9/prebuilt/windows-x86_64/bin/i686-linux-android-g++
CXXFLAGS --sysroot = / c / Android / android-ndk-r10d / platforms / android-9 / arch-x86 / -I / c / Android / android-ndk-r10d / sources / cxx-stl / gnu-libstdc ++ / 4.9 / include -I / c / android / android-ndk-r10d / sources / cxx-stl / gnu-libstdc ++ / 4.9 / libs / x86 / include
LD /c/Android/android-ndk-r10d/toolchains/x86-4.9/prebuilt/windows-x86_64/bin/i686-linux-android-ld
NDK_PROJECT_PATH C: \ Android \ android-ndk-r10d
RANLIB /c/Android/android-ndk-r10d/toolchains/x86-4.9/prebuilt/windows-x86_64/bin/i686-linux-android-ranlib

3. When building OpenSSL to perform
Configure no-shared no-dso android-x86
instead
Configure no-shared no-dso android-armv7

4. When building BerkeleyDB perform
../dist/configure --host = x86-none-linux --enable-cxx --disable-shared --disable-replication
instead
../dist/configure --host = arm-none-linux --enable-cxx --disable-shared --disable-replication

5. When building Boost paste
using gcc: x86: i686-linux-android-g ++ exe;.
instead
using gcc: arm: arm-linux-androideabi-g ++ exe;.

and perform
b2 --build-type = complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset = gcc variant = release link = static threading = multi threadapi = pthread target- os = android define = BOOST_MATH_DISABLE_FLOAT128 include = C: \ android \ android-ndk-r10d \ sources \ cxx-stl \ gnu-libstdc ++ \ 4.9 \ include include = C: \ android \ android-ndk-r10d \ sources \ cxx-stl \ gnu-libstdc ++ \ 4.9 \ libs \ x86 \ include include = C: \ android \ android-ndk-r10d \ platforms \ android-9 \ arch-x86 \ usr \ include

instead

b2 --build-type = complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset = gcc-arm variant = release link = static threading = multi threadapi = pthread target-os = android define = BOOST_MATH_DISABLE_FLOAT128 include = C: \ android \ android-ndk-r10d \ sources \ cxx-stl \ gnu-libstdc ++ \ 4.9 \ include include = C: \ android \ android-ndk-r10d \ sources \ cxx -stl \ gnu-libstdc ++ \ 4.9 \ libs \ armeabi \ include include = C: \ android \ android-ndk-r10d \ platforms \ android-9 \ arch-arm \ usr \ include

6. QtCreator choose Android for Android instead of X86 for armeabi-v7a
